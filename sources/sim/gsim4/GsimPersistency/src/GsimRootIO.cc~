/**
 *  $Id: GsimRootIO.cc,v 1.6 2007/02/04 12:54:11 nanjo Exp $ 
 *  $Log: GsimRootIO.cc,v $
 *  Revision 1.6  2007/02/04 12:54:11  nanjo
 *  Macro is stored in ROOT file.
 *
 *  Revision 1.5  2006/12/09 21:34:09  nanjo
 *  briefHistory is corrected and dictionary write.
 *
 *  Revision 1.4  2006/12/09 00:43:58  nanjo
 *  writeDictionary
 *
 *  Revision 1.3  2006/12/07 08:50:16  nanjo
 *  Midas interfaces for GsimGenParticleData and GsimDetectorEventData are added.
 *
 *  Revision 1.2  2006/12/07 04:45:00  nanjo
 *  runTree is added and GsimRunData is filled.
 *
 *  Revision 1.1  2006/12/06 18:43:16  nanjo
 *  Midas I/O is added and Root I/O is separated.
 * 
 */
#include "GsimPersistency/GsimRootIO.h"
#include "GsimPersistency/GsimMessage.h"
#include "GsimData/GsimDetectorData.h"
#include "GsimData/GsimProcessData.h"
#include "GsimData/GsimPhysicalVolumeData.h"
#include "GsimData/GsimEventData.h"

#include "G4RunManager.hh"

#include "TFile.h"
#include "TTree.h"
#include "TH1.h"
#include "TH2.h"

#include <iostream>
#include <sstream>
#include <cstring>

GsimRootIO::GsimRootIO(const char* tfname)
  : GsimFileIO(tfname)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif  
  if(m_ofname=="") m_ofname="tmp.root";
  
  Long64_t maxsize = 100000; 
  maxsize *= 1000000;//100GB
  TTree::SetMaxTreeSize(maxsize);
  m_tfile = new TFile(m_ofname.c_str(),"RECREATE");
  m_tfile->SetCompressionLevel(1);
  m_commandTree = new TTree("commandTree","commandTree");
  m_commandBuffer = new char[1024];
  m_commandTree->Branch("command",m_commandBuffer,"command/C");
  m_runTree = new TTree("runTree","runTree");
  m_eventSeedTree=0;
  m_eventTree=0;
  m_detectorTree=0;
  m_processTree=0;
  m_eventFillCount=0;
  m_cycleOfEventSeedStore=1000;
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

GsimRootIO::~GsimRootIO() {
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  close();
  delete m_tfile;
  delete [] m_commandBuffer;
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::preBeginOfRunAction(int treeID,int runNumber)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_treeID = treeID;
  m_runNumber=runNumber;
  constructAllTree(treeID);
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::postBeginOfRunAction()
						  
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  fillDetectorDB();
  fillProcessDB();
  fillPhysicalVolumeDB();
  writeAndDestructRunTree();
  writeDictionary();
  
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::endOfRunAction() {
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  writeAndDestructEventTree();
  m_runTree->Fill();
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::beginOfEventAction() {
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  ;
  
  // added by E.Iwai
  int eventID=G4RunManager::GetRunManager()->GetCurrentEvent()->GetEventID();
  if(eventID!=0) { return; }
  
  // General
  m_eventTree->SetBranchStatus("*.mtime.*",0);
  m_eventTree->SetBranchStatus("*.*HitTime",0);
  m_eventTree->SetBranchStatus("*.nTrig",0);
  m_eventTree->SetBranchStatus("*.status",0);
  m_eventTree->SetBranchStatus("*fUniqueID",0);
  m_eventTree->SetBranchStatus("*fBits",0);
  m_eventTree->SetBranchStatus("*thisID",0);
  m_eventTree->SetBranchStatus("GenParticle.briefTracks.mass",0);
  m_eventTree->SetBranchStatus("GenParticle.briefTracks.mech",0);
  m_eventTree->SetBranchStatus("GenParticle.briefTracks.history",0);
  //m_eventTree->SetBranchStatus("Event.*",0);
  
  // Fsim
  //m_eventTree->SetBranchStatus("*.nDigi",0);
  //m_eventTree->SetBranchStatus("*.digi.*",0);
  //m_eventTree->SetBranchStatus("*.hits.stop",0);
  //m_eventTree->SetBranchStatus("*.hits.hitChannel",0);
  //m_eventTree->SetBranchStatus("GenParticle.briefTracks.end_*",0);
  
  // Full sim
  m_eventTree->SetBranchStatus("*.nHit",0);
  m_eventTree->SetBranchStatus("*.hits.*",0);
  m_eventTree->SetBranchStatus("*.digi.mtime*",0);
  
  /*
  // special : decayProb
  m_eventTree->SetBranchStatus("*",0);
  m_eventTree->SetBranchStatus("GenParticle.briefTracks.end_v.fZ");
  m_eventTree->SetBranchStatus("GenParticle.briefTracks.p.f?");
  */
  
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::endOfEventAction(int eventID,bool withDataToStore) {
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  if(withDataToStore) {
    if(m_eventTree) {
      m_eventTree->Fill();
      m_eventFillCount++;
      if(m_eventSeedTree && m_eventFillCount==m_cycleOfEventSeedStore) {
	m_eventSeedTree->Fill();
	m_eventFillCount=0;
      }
    }
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::close()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  if(m_tfile->IsOpen()) {

    writeAndDestructEventTree();

    m_commandTree->Write();
    m_commandTree->Delete();
    m_commandTree=0;
    m_runTree->Write();
    m_runTree->Delete();
    m_runTree=0;
    if(m_dictfo.is_open()){
      m_dictfo.close();
      m_dictfo.clear();
    }

    for(std::list<TH1D*>::iterator it=m_histList.begin();
	it!=m_histList.end();it++) {
      (*it)->Write();
    }

    for(std::list<TH2D*>::iterator it=m_histList2.begin();
	it!=m_histList2.end();it++) {
      (*it)->Write();
    }

    for(std::list<TH1D*>::iterator it=m_histList.begin();
	it!=m_histList.end();it++) {
      delete (*it);
    }

    for(std::list<TH2D*>::iterator it=m_histList2.begin();
	it!=m_histList2.end();it++) {
      delete (*it);
    }
    m_histList.clear();
    m_histList2.clear();
    
    m_tfile->Close();
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::constructAllTree(int treeID)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_tfile->cd();
  char tit[100];
  std::sprintf(tit,"detectorTree%02d",treeID);
  m_detectorTree = new TTree(tit,tit);
  
  std::sprintf(tit,"physicalVolumeTree%02d",treeID);
  m_physicalVolumeTree = new TTree(tit,tit);
  
  std::sprintf(tit,"processTree%02d",treeID);
  m_processTree = new TTree(tit,tit);
  
  std::sprintf(tit,"eventTree%02d",treeID);
  m_eventTree = new TTree(tit,tit);
  
  std::sprintf(tit,"eventSeedTree%02d",treeID);
  m_eventSeedTree = new TTree(tit,tit);
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::writeAndDestructRunTree()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_tfile->cd();
  if(m_detectorTree) {
    m_detectorTree->Write();
    m_detectorTree->Delete();
    m_detectorTree=0;
  }

  if(m_physicalVolumeTree) {
    m_physicalVolumeTree->Write();
    m_physicalVolumeTree->Delete();
    m_physicalVolumeTree=0;
  }

  if(m_processTree) {
    m_processTree->Write();
    m_processTree->Delete();
    m_processTree=0;
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::writeAndDestructEventTree()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  m_tfile->cd();
  if(m_eventTree) {
    m_eventTree->Write();
    m_eventTree->Delete();
    m_eventTree=0;
  }
  if(m_eventSeedTree) {
    m_eventSeedTree->Write();
    m_eventSeedTree->Delete();
    m_eventSeedTree=0;
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

TTree* GsimRootIO::getTree(std::string treeName)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  TTree* tree=0;
  if(treeName=="detectorTree") {
    tree=m_detectorTree;
  } else if(treeName=="physicalVolumeTree") {
    tree=m_physicalVolumeTree;
  } else if(treeName=="processTree") {
    tree=m_processTree;
  } else if(treeName=="eventTree") {
    tree=m_eventTree;
  } else if(treeName=="eventSeedTree") {
    tree=m_eventSeedTree;
  } else if(treeName=="runTree") {
    tree=m_runTree;
  } else if(treeName=="commandTree") {
    tree=m_commandTree;
  } else {
    std::string msg="GsimRootIO No such tree, ";
    msg+=treeName;
    msg+=".";
    GsimMessage::getInstance()
      ->report("warning",msg.c_str());
  }
  return tree;
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}




void GsimRootIO::setBranchOf(std::string treeName,
					 std::string title,
					 std::string className,
					 void* address)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  TTree* tree = getTree(treeName);
  if(tree) {
    tree->Branch(title.c_str(),className.c_str(),address);
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::setBranchOf(std::string treeName,
					 std::string title,
					 void* address,
					 std::string format)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  TTree* tree = getTree(treeName);
  if(tree) {
    tree->Branch(title.c_str(),address,format.c_str());
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::fillTreeOf(std::string treeName)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  TTree* tree = getTree(treeName);
  if(tree) {
    tree->Fill();
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::setEventBranch(std::string title,
				std::string className,
				void* address)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  m_eventTree->Branch(title.c_str(),className.c_str(),address);
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::setEventSeedBranch(std::string title,
						std::string className,
						void* address)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  m_eventSeedTree->Branch(title.c_str(),className.c_str(),address);
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::fillDetectorDB()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_detectorIDFullName.clear();
  m_detectorFullNameID.clear();
  m_detectorIDBriefID.clear();
  m_detectorBriefIDBriefName.clear();
  GsimDetectorData* detData =new GsimDetectorData();
  void* orig=m_detectorTree->GetBranch("detector")->GetAddress();
  m_detectorTree->SetBranchAddress("detector",&detData);
  int nDet=m_detectorTree->GetEntries();
  for(int i=0;i<nDet;i++) {
    m_detectorTree->GetEntry(i);
    
    int id=detData->m_detectorID;
    std::string fullName=std::string( (detData->m_fullName).Data() );
    int briefID=detData->m_briefDetectorID;
    std::string briefName=std::string( (detData->m_briefName).Data() );
    
    m_detectorIDFullName.insert(std::make_pair(id,fullName));
    m_detectorFullNameID.insert(std::make_pair(fullName,id));
    m_detectorIDBriefID.insert(std::make_pair(id,briefID));
    m_detectorBriefIDBriefName.insert(std::make_pair(briefID,briefName));
  }
  m_detectorTree->SetBranchAddress("detector",orig);
  delete detData;
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}
void GsimRootIO::fillProcessDB()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_processIDName.clear();
  m_processNameID.clear();
  GsimProcessData* procData =new GsimProcessData();
  void* orig=m_processTree->GetBranch("process")->GetAddress();
  m_processTree->SetBranchAddress("process",&procData);
  int nProc=m_processTree->GetEntries();
  for(int i=0;i<nProc;i++) {
    m_processTree->GetEntry(i);
    int procID=procData->processID;
    std::string procName=std::string( (procData->processName).Data() );
    m_processIDName.insert(std::make_pair(procID,procName));
    m_processNameID.insert( std::make_pair(procName,procID) );
  }
  m_processTree->SetBranchAddress("process",orig);
  delete procData;
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif  
}
void GsimRootIO::fillPhysicalVolumeDB()
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  m_physicalVolumeNameDetectorID.clear();
  m_sensitiveDetectorNameID.clear();
  m_sensitiveDetectorNameChannelIDClusterID.clear();
  GsimPhysicalVolumeData* pvData =new GsimPhysicalVolumeData();
  void* orig=m_physicalVolumeTree->GetBranch("physicalVolume")->GetAddress();
  m_physicalVolumeTree->SetBranchAddress("physicalVolume",&pvData);
  int nPV=m_physicalVolumeTree->GetEntries();
  for(int i=0;i<nPV;i++) {
    m_physicalVolumeTree->GetEntry(i);
    int detectorID=pvData->detID;
    std::string pvName=std::string( (pvData->pvName).Data() );
    m_physicalVolumeNameDetectorID.insert( std::make_pair(pvName,detectorID) );

    std::string sdName=std::string((pvData->sdName).Data());
    if(sdName!="") {
      m_sensitiveDetectorNameID.insert( std::make_pair(sdName,pvData->sdID));
      
      std::map<std::string,std::map<int,int> >::iterator
	itmm=m_sensitiveDetectorNameChannelIDClusterID.find( sdName );
      if(itmm == m_sensitiveDetectorNameChannelIDClusterID.end() ) {
	std::map<int,int> chcl;
	for(int k=0;k<pvData->sdNch;k++) {
	  chcl.insert( std::make_pair(pvData->sdChID[k],
				      pvData->sdClID[k]) );
	}
	m_sensitiveDetectorNameChannelIDClusterID.insert( std::make_pair(sdName,chcl) );
      } else {
	for(int k=0;k<pvData->sdNch;k++) {
	  (*itmm).second.insert( std::make_pair(pvData->sdChID[k],
						pvData->sdClID[k]) );
	}
      }
    }
  }
  m_physicalVolumeTree->SetBranchAddress("physicalVolume",orig);
  delete pvData;
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::addTriggerBit(unsigned int status)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  void* orig=m_eventTree->GetBranch("Event.")->GetAddress();
  GsimEventData** eventDatap  = (GsimEventData**)(orig);
  if( (*eventDatap) ) {
    (*eventDatap)->trigger |= status;
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::headtail(std::string &line)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  while(std::string(line,0,1)==" ") {
    line.replace(0,1,"");
  }
  while(std::string(line,line.size()-1,line.size())==" ") {
    line.replace(line.size()-1,line.size(),"");
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}

void GsimRootIO::readScript(const char* fname)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  char buf[1024];
  std::ifstream fi;
  fi.open(fname);
  while(!fi.eof()) {
    fi.getline(buf,1024);
    if(std::strlen(buf)>0)
      readCommand(buf);
  }
  fi.close();
  fi.clear();
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


void GsimRootIO::readCommand(const char* line)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  {
    std::sprintf(m_commandBuffer,"%s",line);
    
    std::string tmpline=m_commandBuffer;
    headtail(tmpline);
    
    if(std::string(tmpline,0,17)!="/control/execute ") {
      m_commandTree->Fill();
    } else {
      std::string sfn=std::string(tmpline,17,tmpline.size());
      headtail(sfn);
      readScript(sfn.c_str());
    }
  }
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}


TH1D* GsimRootIO::
createHistogram(char* name,char* title,int nbin,double xmin,double xmax)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif

  std::string sname=name;
  
  for(std::list<TH1D*>::iterator it=m_histList.begin();
      it!=m_histList.end();it++) {
    std::string rname=(*it)->GetName();
    if(rname == sname) {
      std::ostringstream ostr;
      ostr << "The historgram, "
	   << name
	   << ", is already created.";
      GsimMessage::getInstance()
	->report("warning",ostr.str());
      return 0;
    }
  }

  for(std::list<TH2D*>::iterator it=m_histList2.begin();
      it!=m_histList2.end();it++) {
    std::string rname=(*it)->GetName();
    if(rname == sname) {
      std::ostringstream ostr;
      ostr << "The historgram, "
	   << name
	   << ", is already created.";
      GsimMessage::getInstance()
	->report("warning",ostr.str());
      return 0;
    }
  }
  
  m_tfile->cd();
  TH1D* his = new TH1D(name,title,nbin,xmin,xmax);
  m_histList.push_back(his);
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
  return his;
}

void  GsimRootIO::
fillHistogram(char* name,double value)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  TH1D* his = (TH1D*)m_tfile->Get(name);
  if(!his) {
    std::ostringstream ostr;
    ostr << "The historgram, "
	 << name
	 << ", is not created.";
    GsimMessage::getInstance()
      ->report("warning",ostr.str());
    return;
  }
  his->Fill(value);
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}




TH2D* GsimRootIO::
createHistogram(char* name,char* title,
		int nbinx,double xmin,double xmax,
		int nbiny,double ymin,double ymax)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif

  std::string sname=name;

  for(std::list<TH1D*>::iterator it=m_histList.begin();
      it!=m_histList.end();it++) {
    std::string rname=(*it)->GetName();
    if(rname == sname) {
      std::ostringstream ostr;
      ostr << "The historgram, "
	   << name
	   << ", is already created.";
      GsimMessage::getInstance()
	->report("warning",ostr.str());
      return 0;
    }
  }
  
  for(std::list<TH2D*>::iterator it=m_histList2.begin();
      it!=m_histList2.end();it++) {
    std::string rname=(*it)->GetName();
    if(rname == sname) {
      std::ostringstream ostr;
      ostr << "The historgram, "
	   << name
	   << ", is already created.";
      GsimMessage::getInstance()
	->report("warning",ostr.str());
      return 0;
    }
  }
  
  m_tfile->cd();
  TH2D* his = new TH2D(name,title,nbinx,xmin,xmax,nbiny,ymin,ymax);
  m_histList2.push_back(his);
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
  return his;
}

void  GsimRootIO::
fillHistogram(char* name,double xvalue,double yvalue)
{
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugEnter(__PRETTY_FUNCTION__);
#endif
  
  TH2D* his = (TH2D*)m_tfile->Get(name);
  if(!his) {
    std::ostringstream ostr;
    ostr << "The historgram, "
	 << name
	 << ", is not created.";
    GsimMessage::getInstance()
      ->report("warning",ostr.str());
    return;
  }
  his->Fill(xvalue,yvalue);
  
#ifdef GSIMDEBUG
  GsimMessage::getInstance()->debugExit(__PRETTY_FUNCTION__);
#endif
}
