//
// File generated by rootcint at Sun Jun  3 02:38:16 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIGsimTrackDataDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GsimTrackDataDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GsimTrackData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GsimTrackData(void *p = 0);
   static void *newArray_GsimTrackData(Long_t size, void *p);
   static void delete_GsimTrackData(void *p);
   static void deleteArray_GsimTrackData(void *p);
   static void destruct_GsimTrackData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GsimTrackData*)
   {
      ::GsimTrackData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GsimTrackData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GsimTrackData", ::GsimTrackData::Class_Version(), "././GsimData/GsimTrackData.h", 39,
                  typeid(::GsimTrackData), DefineBehavior(ptr, ptr),
                  &::GsimTrackData::Dictionary, isa_proxy, 4,
                  sizeof(::GsimTrackData) );
      instance.SetNew(&new_GsimTrackData);
      instance.SetNewArray(&newArray_GsimTrackData);
      instance.SetDelete(&delete_GsimTrackData);
      instance.SetDeleteArray(&deleteArray_GsimTrackData);
      instance.SetDestructor(&destruct_GsimTrackData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GsimTrackData*)
   {
      return GenerateInitInstanceLocal((::GsimTrackData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GsimTrackData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GsimTrackData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GsimTrackData::Class_Name()
{
   return "GsimTrackData";
}

//______________________________________________________________________________
const char *GsimTrackData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GsimTrackData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GsimTrackData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GsimTrackData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GsimTrackData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GsimTrackData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GsimTrackData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GsimTrackData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void GsimTrackData::Streamer(TBuffer &R__b)
{
   // Stream an object of class GsimTrackData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GsimTrackData::Class(),this);
   } else {
      R__b.WriteClassBuffer(GsimTrackData::Class(),this);
   }
}

//______________________________________________________________________________
void GsimTrackData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GsimTrackData.
      TClass *R__cl = ::GsimTrackData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track", &track);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother", &mother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pid", &pid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.InspectMember(p, "p.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ek", &ek);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v", &v);
      R__insp.InspectMember(v, "v.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_p", &end_p);
      R__insp.InspectMember(end_p, "end_p.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_ek", &end_ek);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_time", &end_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end_v", &end_v);
      R__insp.InspectMember(end_v, "end_v.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mech", &mech);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thisID", &thisID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "history", &history);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GsimTrackData(void *p) {
      return  p ? new(p) ::GsimTrackData : new ::GsimTrackData;
   }
   static void *newArray_GsimTrackData(Long_t nElements, void *p) {
      return p ? new(p) ::GsimTrackData[nElements] : new ::GsimTrackData[nElements];
   }
   // Wrapper around operator delete
   static void delete_GsimTrackData(void *p) {
      delete ((::GsimTrackData*)p);
   }
   static void deleteArray_GsimTrackData(void *p) {
      delete [] ((::GsimTrackData*)p);
   }
   static void destruct_GsimTrackData(void *p) {
      typedef ::GsimTrackData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GsimTrackData

/********************************************************
* src/GsimTrackDataDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGsimTrackDataDict();

extern "C" void G__set_cpp_environmentGsimTrackDataDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("./GsimData/GsimTrackData.h");
  G__cpp_reset_tagtableGsimTrackDataDict();
}
#include <new>
extern "C" int G__cpp_dllrevGsimTrackDataDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GsimTrackData */
static int G__GsimTrackDataDict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GsimTrackData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GsimTrackData[n];
     } else {
       p = new((void*) gvp) GsimTrackData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GsimTrackData;
     } else {
       p = new((void*) gvp) GsimTrackData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GsimTrackData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GsimTrackData(*(GsimTrackData*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) GsimTrackData(*(GsimTrackData*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const GsimTrackData& obj = ((GsimTrackData*) G__getstructoffset())->operator=(*(GsimTrackData*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GsimTrackData*) G__getstructoffset())->dump(*(list<int>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = GsimTrackData::convert5((unsigned long long) G__ULonglong(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GsimTrackData::ptod(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = GsimTrackData::dtop((int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GsimTrackData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GsimTrackData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GsimTrackData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GsimTrackData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GsimTrackData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GsimTrackData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GsimTrackData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GsimTrackData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GsimTrackDataDict_237_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GsimTrackData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GsimTrackData G__TGsimTrackData;
static int G__GsimTrackDataDict_237_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GsimTrackData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GsimTrackData*) (soff+(sizeof(GsimTrackData)*i)))->~G__TGsimTrackData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GsimTrackData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GsimTrackData*) (soff))->~G__TGsimTrackData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GsimTrackData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGsimTrackDataDict {
 public:
  G__Sizep2memfuncGsimTrackDataDict(): p(&G__Sizep2memfuncGsimTrackDataDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGsimTrackDataDict::*p)();
};

size_t G__get_sizep2memfuncGsimTrackDataDict()
{
  G__Sizep2memfuncGsimTrackDataDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGsimTrackDataDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData))) {
     GsimTrackData *G__Lderived;
     G__Lderived=(GsimTrackData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData),G__get_linked_tagnum(&G__GsimTrackDataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGsimTrackDataDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GsimTrackData */
static void G__setup_memvarGsimTrackData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData));
   { GsimTrackData *p; p=(GsimTrackData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->track)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"track=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mother)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"mother=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVector3),-1,-1,1,"p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ek)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ek=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVector3),-1,-1,1,"v=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_p)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVector3),-1,-1,1,"end_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_ek)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"end_ek=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"end_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end_v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TVector3),-1,-1,1,"end_v=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mech)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"mech=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thisID)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"thisID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->history)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"history=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GsimTrackDataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGsimTrackDataDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGsimTrackData(void) {
   /* GsimTrackData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData));
   G__memfunc_setup("GsimTrackData",1279,G__GsimTrackDataDict_237_0_1, 105, G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GsimTrackData",1279,G__GsimTrackDataDict_237_0_2, 105, G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData), -1, 0, 1, 1, 1, 0, "u 'GsimTrackData' - 11 - trackData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__GsimTrackDataDict_237_0_4, 117, G__get_linked_tagnum(&G__GsimTrackDataDictLN_GsimTrackData), -1, 1, 1, 1, 1, 0, "u 'GsimTrackData' - 11 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dump",438,G__GsimTrackDataDict_237_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >' 'list<int>' 1 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("convert5",822,G__GsimTrackDataDict_237_0_6, 117, G__get_linked_tagnum(&G__GsimTrackDataDictLN_string), -1, 0, 1, 3, 1, 0, "m - - 0 - targ", (char*)NULL, (void*) G__func2void( (string (*)(unsigned long long))(&GsimTrackData::convert5) ), 0);
   G__memfunc_setup("ptod",439,G__GsimTrackDataDict_237_0_7, 105, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 0 - p", (char*)NULL, (void*) G__func2void( (int (*)(string))(&GsimTrackData::ptod) ), 0);
   G__memfunc_setup("dtop",439,G__GsimTrackDataDict_237_0_8, 117, G__get_linked_tagnum(&G__GsimTrackDataDictLN_string), -1, 0, 1, 3, 1, 0, "i - - 0 - d", (char*)NULL, (void*) G__func2void( (string (*)(int))(&GsimTrackData::dtop) ), 0);
   G__memfunc_setup("Class",502,G__GsimTrackDataDict_237_0_9, 85, G__get_linked_tagnum(&G__GsimTrackDataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GsimTrackData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GsimTrackDataDict_237_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GsimTrackData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GsimTrackDataDict_237_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GsimTrackData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GsimTrackDataDict_237_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GsimTrackData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GsimTrackDataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GsimTrackDataDict_237_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GsimTrackDataDict_237_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GsimTrackData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GsimTrackDataDict_237_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GsimTrackData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GsimTrackDataDict_237_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GsimTrackData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GsimTrackDataDict_237_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GsimTrackData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GsimTrackData", 1405, G__GsimTrackDataDict_237_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGsimTrackDataDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGsimTrackDataDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGsimTrackDataDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GsimTrackDataDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_listlEintcOallocatorlEintgRsPgR = { "list<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__GsimTrackDataDictLN_GsimTrackData = { "GsimTrackData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGsimTrackDataDict() {
  G__GsimTrackDataDictLN_TClass.tagnum = -1 ;
  G__GsimTrackDataDictLN_TBuffer.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMemberInspector.tagnum = -1 ;
  G__GsimTrackDataDictLN_TObject.tagnum = -1 ;
  G__GsimTrackDataDictLN_string.tagnum = -1 ;
  G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_TVector3.tagnum = -1 ;
  G__GsimTrackDataDictLN_listlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__GsimTrackDataDictLN_GsimTrackData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGsimTrackDataDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_string);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_listlEintcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GsimTrackDataDictLN_GsimTrackData),sizeof(GsimTrackData),-1,294656,(char*)NULL,G__setup_memvarGsimTrackData,G__setup_memfuncGsimTrackData);
}
extern "C" void G__cpp_setupGsimTrackDataDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGsimTrackDataDict()");
  G__set_cpp_environmentGsimTrackDataDict();
  G__cpp_setup_tagtableGsimTrackDataDict();

  G__cpp_setup_inheritanceGsimTrackDataDict();

  G__cpp_setup_typetableGsimTrackDataDict();

  G__cpp_setup_memvarGsimTrackDataDict();

  G__cpp_setup_memfuncGsimTrackDataDict();
  G__cpp_setup_globalGsimTrackDataDict();
  G__cpp_setup_funcGsimTrackDataDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGsimTrackDataDict();
  return;
}
class G__cpp_setup_initGsimTrackDataDict {
  public:
    G__cpp_setup_initGsimTrackDataDict() { G__add_setup_func("GsimTrackDataDict",(G__incsetup)(&G__cpp_setupGsimTrackDataDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGsimTrackDataDict() { G__remove_setup_func("GsimTrackDataDict"); }
};
G__cpp_setup_initGsimTrackDataDict G__cpp_setup_initializerGsimTrackDataDict;

